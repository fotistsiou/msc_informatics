---------------- Connection and Exit with PostgreSQL ----------------

- Connect to "postgres" DB with "postgres" Role/User with psql tool:
  fotistsiou@fotistsiou:~$ sudo -i -u postgres psql

- Connect with "postgres" Role/User:
  fotistsiou@fotistsiou:~$ sudo -i -u postgres

- Connect to "postgres" with psql tool:
  postgres@fotistsiou:~$ psql

- Connect to a remote host DB with a specific Role/User with psql tool:
  fotistsiou@fotistsiou:~$ psql -h localhost -p 5432 -U postgres myunipi

- Exit from psql tool:
  postgres=# \q 

- Exit from connect with a Role/User:
  postgres@fotistsiou:~$ exit

---------------- 1. Role/User ----------------

- Show all Role/User:
  postgres=# \du 

- Show current Role/User:
  postgres=# select current_user;

- Create a Role/User:
  postgres=# CREATE ROLE fotistsiou SUPERUSER LOGIN PASSWORD '2410'; 

- Drop a Role/User:
  fotistsiou@fotistsiou:~$ sudo -u postgres dropuser fotistsiou -e
  OR
  postgres=# DROP ROLE fotistsiou;

--------------- 2. DATABASE ----------------

- Show all DB:
  postgres-# \l

- Connect to a DB:
  postgres-# \c friend_network

- Create a DB:
  postgres=# CREATE DATABASE myunipi OWNER datamaster;
  OR
  postgres-# CREATE DATABASE friend_network WITH OWNER=fotistsiou ENCODING=utf8;

- Drop a DB:
  postgres=# DROP DATABASE friend_network;

--------------- 3. Table/Relation ----------------

- Show list of all Tables/Relations:
  postgres=# \dt

- Show details of a Table/Relation:
  postgres=# \d company
   
- Create a Table/Relation with PRIMARY KEY:
  postgres=#  create table department (
                dept_name varchar(20),
                building varchar(15),
                budget numeric(12,2) check (budget > 0),
                primary key (dept_name) 
              );

- Create a Table/Relation with PRIMARY KEY and FOREIGN KEY 
(If I delete a row from 'dept_name' column of 'department' table, 
all of fields with this value in the 'student' table will be set to null):
  postgres=#  create table student (
                id varchar(5),
                name varchar(20) not null,
                dept_name varchar(20),
                tot_cred numeric(3,0) check (tot_cred >= 0),
                primary key (id),
                foreign key (dept_name) references department (dept_name) on delete set null
              );

- Create a Table/Relation with IDENTITY COLUMN (GENERATED ALWAYS AS ( generation_expr ) STORED):
  postgres=#  create table department (
                dept_name varchar(20),
                building varchar(15),
                budget numeric(12,2) check (budget > 0),
                double_budget int generated always as (budget * 2) stored,
                primary key (dept_name) 
              );

- Create a Table/Relation with Regular Expressions and Range (IN) check:
  postgres=#  create table test (
                salary numeric(8,2) check (salary > 29000),
                col1 varchar(10) check (VALUE IN ('white', 'red', 'rose', 'sparkling’)),
                col2 varchar(5) check (col2 ~ '^[α-ω]{5}$'),
              );

- Rename a column:
  ALTER TABLE student RENAME COLUMN name TO name_student;


- Drop a Table/Relation:
  postgres=# DROP TABLE users; 

-------------- Domain ----------------

- Create a domain as datatype (Only accept English lowercase characters):
  CREATE DOMAIN my_domain AS VARCHAR(1) CHECK (VALUE ~ '^[a-f]$');

-------------- Select ----------------

- Simple Select:
  SELECT dept_name FROM department WHERE budget>50000;

- Select with DISTINCT (remove duplicate rows from a result):
  SELECT DISTINCT dept_name FROM instructor;

- Select with nested query:
  SELECT DISTINCT T.name 
  FROM instructor as T  
  WHERE T.salary > (
      SELECT MIN(salary) 
      FROM instructor 
      WHERE dept_name = 'Comp. Sci.'
  );

- Select with aggregated function:
  SELECT MAX(budget) FROM department;

- Select with column alias:
  SELECT dept_name, budget AS proipologismos FROM department;

- Select with arithmetic operation:
  SELECT budget*2 AS double_budget FROM department;

- Select with sorting:
  SELECT name, dept_name 
  FROM instructor 
  ORDER BY name ASC, dept_name DESC;

- Select with limit:
  SELECT DISTINCT name FROM instructor LIMIT 5;

- Select with offset:
  SELECT DISTINCT name FROM instructor LIMIT 5 OFFSET 2;

- Select with aggregated function and column (only with use GROUP BY):
  SELECT dept_name, avg(salary) as avg_salary
  FROM instructor
  GROUP BY dept_name;

- Create temporarily table and Select with use this:
  WITH teach_id AS (
        SELECT id 
        FROM teaches 
        WHERE teaches.year=2018
      )
  SELECT instructor.name FROM instructor, teach_id 
  WHERE instructor.id=teach_id.id;

- Select wiht aggregated functions and use filter
(FILTER = condition on aggregated function):
  SELECT dept_name, budget, 
  COUNT(*) FILTER (WHERE building='Taylor'),
  SUM(budget) FILTER (WHERE budget>60000)
  FROM department 
  GROUP BY dept_name, budget;


- Select with GROUP BY and HAVING 
(HAVING for GROUP BY = WHERE for SELECT)
(GROUP BY = DISTINCT)
(All courses with their information, chosen by two or more students in the same semester):
  SELECT course_id, sec_id, semester, year, avg(tot_cred)
  FROM student, takes
  WHERE student.ID= takes.ID
  GROUP BY course_id, sec_id, semester, year
  HAVING count(student.ID) >= 2;

-------------- Insert ----------------

- Insert a new row:
  INSERT INTO student VALUES ('00128', 'Zhang', 'Biology', 102);
  OR 
  INSERT INTO student (id, name, dept_name, tot_cred) VALUES ('00128', 'Zhang', 'Biology', 102);

-------------- Insert ----------------

- Copy data from csv to table (Insert data from 'country data.csv' to 'department table'. 
'country data.csv' has the names of table columns in the first row (headers) 
and cells are delimited with question mark ';'.):
  COPY department FROM '/private/tmp/country_data.csv' DELIMITERS ';' CSV HEADER;

-------------- Update ----------------

- Update a row:
  UPDATE department SET(building, budget) = ('room 21', 100) WHERE dept_name='plh';

-------------- Delete ----------------

- Delete a row:
  DELETE FROM department WHERE dept_name = 'plh';

--------------- General ----------------

- Clear console:
  postgres=# \! clear -> linux
  postgres=# \! cls   -> windows

- Open and work with editor:
  postgres=# \e

- Show list of available schema:
  postgres=# \dn