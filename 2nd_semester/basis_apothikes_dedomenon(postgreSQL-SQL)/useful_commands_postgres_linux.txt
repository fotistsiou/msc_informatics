---------------- Connection and Exit with PostgreSQL ----------------

- Connect to "postgres" DB with "postgres" Role/User with psql tool:
  fotistsiou@fotistsiou:~$ sudo -i -u postgres psql

- Connect with "postgres" Role/User:
  fotistsiou@fotistsiou:~$ sudo -i -u postgres

- Connect to "postgres" with psql tool:
  postgres@fotistsiou:~$ psql

- Connect to a remote host DB with a specific Role/User with psql tool:
  fotistsiou@fotistsiou:~$ psql -h localhost -p 5432 -U postgres myunipi

- Exit from psql tool:
  postgres=# \q 

- Exit from connect with a Role/User:
  postgres@fotistsiou:~$ exit

---------------- 1. Role/User ----------------

- Show all Role/User:
  postgres=# \du 

- Show current Role/User:
  postgres=# select current_user;

- Create a Role/User:
  postgres=# CREATE ROLE fotistsiou SUPERUSER LOGIN PASSWORD '2410'; 

- Drop a Role/User:
  fotistsiou@fotistsiou:~$ sudo -u postgres dropuser fotistsiou -e
  OR
  postgres=# DROP ROLE fotistsiou;

--------------- 2. DATABASE ----------------

- Show all DB:
  postgres-# \l

- Connect to a DB:
  postgres-# \c friend_network

- Create a DB:
  postgres=# CREATE DATABASE myunipi OWNER datamaster;
  OR
  postgres-# CREATE DATABASE friend_network WITH OWNER=fotistsiou ENCODING=utf8;

- Drop a DB:
  postgres=# DROP DATABASE friend_network;

--------------- 3. Table/Relation ----------------

- Show list of all Tables/Relations:
  postgres=# \dt

- Show details of a Table/Relation:
  postgres=# \d company
   
- Create a Table/Relation with PRIMARY KEY:
  postgres=#  create table department (
                dept_name varchar(20),
                building varchar(15),
                budget numeric(12,2) check (budget > 0),
                primary key (dept_name) 
              );

- Create a Table/Relation with PRIMARY KEY and FOREIGN KEY 
(If I delete a row from 'dept_name' column of 'department' table, 
all of fields with this value in the 'student' table will be set to null):
  postgres=#  create table student (
                id varchar(5),
                name varchar(20) not null,
                dept_name varchar(20),
                tot_cred numeric(3,0) check (tot_cred >= 0),
                primary key (id),
                foreign key (dept_name) references department (dept_name) on delete set null
              );

- Create a Table/Relation with IDENTITY COLUMN (GENERATED ALWAYS AS ( generation_expr ) STORED):
  postgres=#  create table department (
                dept_name varchar(20),
                building varchar(15),
                budget numeric(12,2) check (budget > 0),
                double_budget int generated always as (budget * 2) stored,
                primary key (dept_name) 
              );

- Rename a column:
  ALTER TABLE student RENAME COLUMN name TO name_student;


- Drop a Table/Relation:
  postgres=# DROP TABLE users; 

-------------- Domain ----------------

- Create a domain as datatype (Only accept English lowercase characters):
  CREATE DOMAIN my_domain AS VARCHAR(1) CHECK (VALUE ~ '^[a-f]$');

-------------- Insert ----------------

- Insert a new row:
  INSERT INTO student VALUES ('00128', 'Zhang', 'Biology', 102);
  OR 
  INSERT INTO student (id, name, dept_name, tot_cred) VALUES ('00128', 'Zhang', 'Biology', 102);

-------------- Select ----------------

- Simple Select:
  SELECT dept_name FROM department WHERE budget>50000;

- Select with DISTINCT (remove duplicate rows from a result):
  SELECT DISTINCT dept_name FROM instructor;

- Select with aggregated function:
  SELECT MAX(budget) FROM department;

- Select with aggregated function and column (only with use GROUP BY):
  SELECT dept_name, avg(salary) as avg_salary
  FROM instructor
  GROUP BY dept_name;

- Select with nested query:
  SELECT DISTINCT T.name 
  FROM instructor as T  
  WHERE T.salary > (
      SELECT MIN(salary) 
      FROM instructor 
      WHERE dept_name = 'Comp. Sci.'
  );

- Select with GROUP BY and HAVING 
(HAVING for GROUP BY = WHERE for SELECT)
(GROUP BY = DISTINCT):
  SELECT course_id, semester, year, sec_id, avg (tot_cred)
  FROM student, takes
  WHERE student.ID = takes.ID and year = 2017
  GROUP BY course_id, semester, year, sec_id
  HAVING COUNT(student.ID) >= 2;

-------------- Insert ----------------

- Insert a row:
  INSERT INTO department (dept_name, building, budget ) values ('plh', 'Taylor', '123456');

-------------- Update ----------------

- Update a row:
  UPDATE department SET(building, budget) = ('room 21', 100) WHERE dept_name='plh';

-------------- Delete ----------------

- Delete a row:
  DELETE FROM department WHERE dept_name = 'plh';

--------------- General ----------------

- Clear console:
  postgres=# \! clear -> linux
  postgres=# \! cls   -> windows

- Open and work with editor:
  postgres=# \e

- Show list of available schema:
  postgres=# \dn